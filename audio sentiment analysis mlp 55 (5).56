{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "51c3b979",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: numpy==1.22.0 in c:\\users\\samru\\appdata\\roaming\\python\\python39\\site-packages (1.22.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install numpy==1.22.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ab589ea7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: scipy in c:\\users\\samru\\appdata\\roaming\\python\\python39\\site-packages (1.11.4)\n",
      "Requirement already satisfied: numpy<1.28.0,>=1.21.6 in c:\\users\\samru\\appdata\\roaming\\python\\python39\\site-packages (from scipy) (1.22.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "48aeb15b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import librosa\n",
    "import pandas as pd\n",
    "import soundfile\n",
    "import os,glob,pickle\n",
    "from sklearn.model_selection import train_test_split "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "dbfa7671",
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_feature(file):\n",
    "    with soundfile.SoundFile(file) as sound_file:\n",
    "        X = sound_file.read(dtype=\"float32\")\n",
    "        sr=sound_file.samplerate\n",
    "    result=np.array([])\n",
    "    mfcc=np.mean(librosa.feature.mfcc(y=X,sr=sr,n_mfcc=40).T,axis=0)\n",
    "    mfcc = mfcc.flatten()\n",
    "    result=np.hstack((result,mfcc))\n",
    "    \n",
    "    chroma=np.mean(librosa.feature.chroma_stft(y=X,sr=sr).T,axis=0)\n",
    "    chroma = chroma.flatten()\n",
    "    result=np.hstack((result,chroma))\n",
    "    \n",
    "    mel=np.mean(librosa.feature.melspectrogram(y=X,sr=sr).T,axis=0)\n",
    "    mel = mel.flatten()\n",
    "    result=np.hstack((result,mel))\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "10edcfd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "emotions={\n",
    "    '01':'neutral',\n",
    "    '02':'calm',\n",
    "    '03':'happy',\n",
    "    '04':'sad',\n",
    "    '05':'angry',\n",
    "    '06':'fearful',\n",
    "    '07':'disgust',\n",
    "    '08':'surprised'\n",
    "}\n",
    "observed_emotions=['calm', 'happy', 'sad']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "1231ef0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def load_data(test_size=0.2):  \n",
    "    \n",
    "    x,y=[],[]\n",
    "    for file in glob.glob(\"D:\\\\archive1\\\\Actor_*\\\\*.wav\"):\n",
    "        file_name=os.path.basename(file)\n",
    "        emotion=emotions[file_name.split(\"-\")[2]]\n",
    "        if emotion not in observed_emotions:\n",
    "            continue\n",
    "        feature=extract_feature(file)\n",
    "        x.append(feature)\n",
    "        y.append(emotion)\n",
    "    return train_test_split(np.array(x, dtype=object), y, test_size=test_size, random_state=9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "5bc6b6ad",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\samru\\AppData\\Roaming\\Python\\Python39\\site-packages\\librosa\\core\\spectrum.py:257: UserWarning: n_fft=2048 is too large for input signal of length=2\n",
      "  warnings.warn(\n",
      "C:\\Users\\samru\\AppData\\Roaming\\Python\\Python39\\site-packages\\librosa\\core\\pitch.py:101: UserWarning: Trying to estimate tuning from empty frequency set.\n",
      "  return pitch_tuning(\n"
     ]
    }
   ],
   "source": [
    "x_train,x_test,y_train,y_test=load_data(test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "b5436cf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(432,)\n",
      "(144,)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(x_train.shape)\n",
    "print(x_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "ada11357",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features extracted: 432\n",
      "Features extracted: 144\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(f'Features extracted: {x_train.shape[0]}')\n",
    "print(f'Features extracted: {x_test.shape[0]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "dab70eae",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "x_train_padded = pad_sequences(x_train, maxlen=100, padding='post', dtype='float32')\n",
    "x_test_padded = pad_sequences(x_test, maxlen=100, padding='post', dtype='float32')\n",
    "\n",
    "# Reshape sequences for MLPClassifier\n",
    "x_train_reshaped = x_train_padded.reshape((len(x_train_padded), -1))\n",
    "x_test_reshaped = x_test_padded.reshape((len(x_test_padded), -1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "63eb81c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlpmodel = MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, hidden_layer_sizes=(300,), learning_rate='adaptive', max_iter=450)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "86cfb888",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\anaconda\\lib\\site-packages\\sklearn\\neural_network\\_multilayer_perceptron.py:692: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (450) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "y = mlpmodel.fit(x_train_reshaped,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "14c95ae8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 55.56%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "y_pred = mlpmodel.predict(x_test_reshaped)\n",
    "accuracy=accuracy_score(y_true=y_test, y_pred=y_pred)\n",
    "print(\"Accuracy: {:.2f}%\".format(accuracy*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "45f84208",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 2: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 3: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 4: Training Accuracy: 64.12%, Testing Accuracy: 56.25%\n",
      "Iteration 5: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 6: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 7: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 8: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 9: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 10: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 11: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 12: Training Accuracy: 64.35%, Testing Accuracy: 56.25%\n",
      "Iteration 13: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 14: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 15: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 16: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 17: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 18: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 19: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 20: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 21: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 22: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 23: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 24: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 25: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 26: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 27: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 28: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 29: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 30: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 31: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 32: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 33: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 34: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 35: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 36: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 37: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 38: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 39: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 40: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 41: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 42: Training Accuracy: 64.81%, Testing Accuracy: 54.86%\n",
      "Iteration 43: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 44: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 45: Training Accuracy: 64.58%, Testing Accuracy: 55.56%\n",
      "Iteration 46: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 47: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 48: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 49: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 50: Training Accuracy: 64.58%, Testing Accuracy: 55.56%\n",
      "Iteration 51: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 52: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 53: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 54: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 55: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 56: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 57: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 58: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 59: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 60: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 61: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 62: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 63: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 64: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 65: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 66: Training Accuracy: 64.58%, Testing Accuracy: 55.56%\n",
      "Iteration 67: Training Accuracy: 64.58%, Testing Accuracy: 55.56%\n",
      "Iteration 68: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 69: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 70: Training Accuracy: 64.35%, Testing Accuracy: 55.56%\n",
      "Iteration 71: Training Accuracy: 64.58%, Testing Accuracy: 55.56%\n",
      "Iteration 72: Training Accuracy: 64.58%, Testing Accuracy: 54.86%\n",
      "Iteration 73: Training Accuracy: 64.58%, Testing Accuracy: 54.86%\n",
      "Iteration 74: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 75: Training Accuracy: 64.12%, Testing Accuracy: 55.56%\n",
      "Iteration 76: Training Accuracy: 64.58%, Testing Accuracy: 55.56%\n",
      "Iteration 77: Training Accuracy: 64.58%, Testing Accuracy: 54.86%\n",
      "Iteration 78: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 79: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 80: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 81: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 82: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 83: Training Accuracy: 64.35%, Testing Accuracy: 54.86%\n",
      "Iteration 84: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 85: Training Accuracy: 63.89%, Testing Accuracy: 54.86%\n",
      "Iteration 86: Training Accuracy: 64.35%, Testing Accuracy: 54.86%\n",
      "Iteration 87: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 88: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 89: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 90: Training Accuracy: 64.35%, Testing Accuracy: 54.86%\n",
      "Iteration 91: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 92: Training Accuracy: 64.12%, Testing Accuracy: 54.86%\n",
      "Iteration 93: Training Accuracy: 64.35%, Testing Accuracy: 54.86%\n",
      "Iteration 94: Training Accuracy: 64.12%, Testing Accuracy: 54.17%\n",
      "Iteration 95: Training Accuracy: 64.12%, Testing Accuracy: 54.17%\n",
      "Iteration 96: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 97: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 98: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 99: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 100: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 101: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 102: Training Accuracy: 64.58%, Testing Accuracy: 54.86%\n",
      "Iteration 103: Training Accuracy: 64.35%, Testing Accuracy: 54.86%\n",
      "Iteration 104: Training Accuracy: 64.12%, Testing Accuracy: 54.17%\n",
      "Iteration 105: Training Accuracy: 64.12%, Testing Accuracy: 53.47%\n",
      "Iteration 106: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 107: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 108: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 109: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 110: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 111: Training Accuracy: 64.12%, Testing Accuracy: 54.17%\n",
      "Iteration 112: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 113: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 114: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 115: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 116: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 117: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 118: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 119: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 120: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 121: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 122: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 123: Training Accuracy: 64.12%, Testing Accuracy: 54.17%\n",
      "Iteration 124: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 125: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 126: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 127: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 128: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 129: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 130: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 131: Training Accuracy: 63.89%, Testing Accuracy: 54.17%\n",
      "Iteration 132: Training Accuracy: 64.12%, Testing Accuracy: 53.47%\n",
      "Iteration 133: Training Accuracy: 64.12%, Testing Accuracy: 53.47%\n",
      "Iteration 134: Training Accuracy: 64.12%, Testing Accuracy: 53.47%\n",
      "Iteration 135: Training Accuracy: 64.35%, Testing Accuracy: 53.47%\n",
      "Iteration 136: Training Accuracy: 64.81%, Testing Accuracy: 53.47%\n",
      "Iteration 137: Training Accuracy: 64.81%, Testing Accuracy: 53.47%\n",
      "Iteration 138: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 139: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 140: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 141: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 142: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 143: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 144: Training Accuracy: 64.35%, Testing Accuracy: 54.17%\n",
      "Iteration 145: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 146: Training Accuracy: 64.81%, Testing Accuracy: 53.47%\n",
      "Iteration 147: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 148: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 149: Training Accuracy: 64.81%, Testing Accuracy: 53.47%\n",
      "Iteration 150: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 151: Training Accuracy: 65.51%, Testing Accuracy: 54.17%\n",
      "Iteration 152: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 153: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 154: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 155: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 156: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 157: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 158: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 159: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 160: Training Accuracy: 64.81%, Testing Accuracy: 53.47%\n",
      "Iteration 161: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 162: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 163: Training Accuracy: 64.58%, Testing Accuracy: 54.17%\n",
      "Iteration 164: Training Accuracy: 64.58%, Testing Accuracy: 53.47%\n",
      "Iteration 165: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 166: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 167: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 168: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 169: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 170: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 171: Training Accuracy: 65.51%, Testing Accuracy: 54.17%\n",
      "Iteration 172: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 173: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 174: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 175: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 176: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 177: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 178: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 179: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 180: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 181: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 182: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 183: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 184: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 185: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 186: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 187: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 188: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 189: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 190: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 191: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 192: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 193: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 194: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 195: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 196: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 197: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 198: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 199: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 200: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 201: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 202: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 203: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 204: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 205: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 206: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 207: Training Accuracy: 65.05%, Testing Accuracy: 54.17%\n",
      "Iteration 208: Training Accuracy: 65.05%, Testing Accuracy: 53.47%\n",
      "Iteration 209: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 210: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 211: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 212: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 213: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 214: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 215: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 216: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 217: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 218: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 219: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 220: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 221: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 222: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 223: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 224: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 225: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 226: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 227: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 228: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 229: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 230: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 231: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 232: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 233: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 234: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 235: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 236: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 237: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 238: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 239: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 240: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 241: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 242: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 243: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 244: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 245: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 246: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 247: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 248: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 249: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 250: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 251: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 252: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 253: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 254: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 255: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 256: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 257: Training Accuracy: 65.28%, Testing Accuracy: 54.17%\n",
      "Iteration 258: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 259: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 260: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 261: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 262: Training Accuracy: 64.81%, Testing Accuracy: 54.17%\n",
      "Iteration 263: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 264: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 265: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 266: Training Accuracy: 65.51%, Testing Accuracy: 54.17%\n",
      "Iteration 267: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 268: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 269: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 270: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 271: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 272: Training Accuracy: 65.28%, Testing Accuracy: 53.47%\n",
      "Iteration 273: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 274: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 275: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 276: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 277: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 278: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 279: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 280: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 281: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 282: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 283: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 284: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 285: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 286: Training Accuracy: 65.51%, Testing Accuracy: 53.47%\n",
      "Iteration 287: Training Accuracy: 65.74%, Testing Accuracy: 54.17%\n",
      "Iteration 288: Training Accuracy: 65.97%, Testing Accuracy: 54.17%\n",
      "Iteration 289: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 290: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 291: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 292: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 293: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 294: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 295: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 296: Training Accuracy: 65.74%, Testing Accuracy: 53.47%\n",
      "Iteration 297: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 298: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 299: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 300: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 301: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 302: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 303: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 304: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 305: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 306: Training Accuracy: 65.97%, Testing Accuracy: 54.17%\n",
      "Iteration 307: Training Accuracy: 65.97%, Testing Accuracy: 54.17%\n",
      "Iteration 308: Training Accuracy: 65.97%, Testing Accuracy: 54.17%\n",
      "Iteration 309: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 310: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 311: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 312: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 313: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 314: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 315: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 316: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 317: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 318: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 319: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 320: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 321: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 322: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 323: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 324: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 325: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 326: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 327: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 328: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 329: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 330: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 331: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 332: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 333: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 334: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 335: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 336: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 337: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 338: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 339: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 340: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 341: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 342: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 343: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 344: Training Accuracy: 65.97%, Testing Accuracy: 53.47%\n",
      "Iteration 345: Training Accuracy: 66.44%, Testing Accuracy: 52.78%\n",
      "Iteration 346: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 347: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 348: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 349: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 350: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 351: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 352: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 353: Training Accuracy: 66.44%, Testing Accuracy: 54.17%\n",
      "Iteration 354: Training Accuracy: 65.97%, Testing Accuracy: 54.17%\n",
      "Iteration 355: Training Accuracy: 66.44%, Testing Accuracy: 52.78%\n",
      "Iteration 356: Training Accuracy: 65.97%, Testing Accuracy: 52.78%\n",
      "Iteration 357: Training Accuracy: 65.97%, Testing Accuracy: 52.78%\n",
      "Iteration 358: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 359: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 360: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 361: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 362: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 363: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 364: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 365: Training Accuracy: 66.44%, Testing Accuracy: 54.17%\n",
      "Iteration 366: Training Accuracy: 66.20%, Testing Accuracy: 54.17%\n",
      "Iteration 367: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 368: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 369: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 370: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 371: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 372: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 373: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 374: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 375: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 376: Training Accuracy: 66.20%, Testing Accuracy: 54.17%\n",
      "Iteration 377: Training Accuracy: 66.44%, Testing Accuracy: 54.17%\n",
      "Iteration 378: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 379: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 380: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 381: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 382: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 383: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 384: Training Accuracy: 65.51%, Testing Accuracy: 54.17%\n",
      "Iteration 385: Training Accuracy: 66.44%, Testing Accuracy: 54.86%\n",
      "Iteration 386: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 387: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 388: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 389: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 390: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 391: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 392: Training Accuracy: 66.20%, Testing Accuracy: 53.47%\n",
      "Iteration 393: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 394: Training Accuracy: 65.97%, Testing Accuracy: 54.86%\n",
      "Iteration 395: Training Accuracy: 66.67%, Testing Accuracy: 54.17%\n",
      "Iteration 396: Training Accuracy: 66.90%, Testing Accuracy: 54.17%\n",
      "Iteration 397: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 398: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 399: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 400: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 401: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 402: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 403: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 404: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 405: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 406: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 407: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 408: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 409: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 410: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 411: Training Accuracy: 66.44%, Testing Accuracy: 53.47%\n",
      "Iteration 412: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 413: Training Accuracy: 66.67%, Testing Accuracy: 53.47%\n",
      "Iteration 414: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 415: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 416: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 417: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 418: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 419: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 420: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 421: Training Accuracy: 67.59%, Testing Accuracy: 52.78%\n",
      "Iteration 422: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 423: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 424: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 425: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 426: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 427: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 428: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 429: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 430: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 431: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 432: Training Accuracy: 66.90%, Testing Accuracy: 53.47%\n",
      "Iteration 433: Training Accuracy: 67.13%, Testing Accuracy: 54.17%\n",
      "Iteration 434: Training Accuracy: 66.90%, Testing Accuracy: 54.17%\n",
      "Iteration 435: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 436: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 437: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 438: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 439: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 440: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 441: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 442: Training Accuracy: 66.67%, Testing Accuracy: 52.78%\n",
      "Iteration 443: Training Accuracy: 66.90%, Testing Accuracy: 52.78%\n",
      "Iteration 444: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 445: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 446: Training Accuracy: 67.36%, Testing Accuracy: 53.47%\n",
      "Iteration 447: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 448: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 449: Training Accuracy: 67.36%, Testing Accuracy: 53.47%\n",
      "Iteration 450: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 451: Training Accuracy: 67.36%, Testing Accuracy: 53.47%\n",
      "Iteration 452: Training Accuracy: 67.36%, Testing Accuracy: 53.47%\n",
      "Iteration 453: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 454: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 455: Training Accuracy: 67.36%, Testing Accuracy: 53.47%\n",
      "Iteration 456: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 457: Training Accuracy: 67.59%, Testing Accuracy: 53.47%\n",
      "Iteration 458: Training Accuracy: 67.59%, Testing Accuracy: 53.47%\n",
      "Iteration 459: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 460: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 461: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 462: Training Accuracy: 67.59%, Testing Accuracy: 52.78%\n",
      "Iteration 463: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 464: Training Accuracy: 67.59%, Testing Accuracy: 52.78%\n",
      "Iteration 465: Training Accuracy: 67.59%, Testing Accuracy: 52.78%\n",
      "Iteration 466: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 467: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 468: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 469: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 470: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 471: Training Accuracy: 68.06%, Testing Accuracy: 52.78%\n",
      "Iteration 472: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 473: Training Accuracy: 67.59%, Testing Accuracy: 52.78%\n",
      "Iteration 474: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 475: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 476: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 477: Training Accuracy: 67.59%, Testing Accuracy: 54.17%\n",
      "Iteration 478: Training Accuracy: 67.82%, Testing Accuracy: 54.17%\n",
      "Iteration 479: Training Accuracy: 67.82%, Testing Accuracy: 54.17%\n",
      "Iteration 480: Training Accuracy: 67.36%, Testing Accuracy: 52.78%\n",
      "Iteration 481: Training Accuracy: 67.13%, Testing Accuracy: 52.78%\n",
      "Iteration 482: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 483: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 484: Training Accuracy: 67.59%, Testing Accuracy: 52.78%\n",
      "Iteration 485: Training Accuracy: 67.82%, Testing Accuracy: 52.78%\n",
      "Iteration 486: Training Accuracy: 67.59%, Testing Accuracy: 53.47%\n",
      "Iteration 487: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 488: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 489: Training Accuracy: 67.59%, Testing Accuracy: 53.47%\n",
      "Iteration 490: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 491: Training Accuracy: 67.13%, Testing Accuracy: 53.47%\n",
      "Iteration 492: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 493: Training Accuracy: 67.59%, Testing Accuracy: 53.47%\n",
      "Iteration 494: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 495: Training Accuracy: 67.59%, Testing Accuracy: 53.47%\n",
      "Iteration 496: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 497: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 498: Training Accuracy: 68.06%, Testing Accuracy: 53.47%\n",
      "Iteration 499: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n",
      "Iteration 500: Training Accuracy: 67.82%, Testing Accuracy: 53.47%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_accuracy=[]\n",
    "test_accuracy =[]\n",
    "for i in range(1, 501):\n",
    "    mlpmodel.partial_fit(x_train_reshaped, y_train, classes=np.unique(y_train))\n",
    "    \n",
    "    # Training accuracy\n",
    "    y_train_pred = mlpmodel.predict(x_train_reshaped)\n",
    "    train_acc = accuracy_score(y_true=y_train, y_pred=y_train_pred)\n",
    "    train_accuracy.append(train_acc)\n",
    "    \n",
    "    # Testing accuracy\n",
    "    y_test_pred = mlpmodel.predict(x_test_reshaped)\n",
    "    test_acc = accuracy_score(y_true=y_test, y_pred=y_test_pred)\n",
    "    test_accuracy.append(test_acc)\n",
    "\n",
    "    # Print the current iteration and accuracy\n",
    "    print(\"Iteration {}: Training Accuracy: {:.2f}%, Testing Accuracy: {:.2f}%\".format(i, train_acc * 100, test_acc * 100))\n",
    "\n",
    "# Plotting the accuracy vs iterations\n",
    "iterations = np.arange(1, 501)\n",
    "plt.plot(iterations, train_accuracy, label='Training Accuracy')\n",
    "plt.plot(iterations, test_accuracy, label='Testing Accuracy')\n",
    "plt.xlabel('Iterations')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Accuracy vs Iterations')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "2d4aa9a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix using seaborn\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=np.unique(y_test), yticklabels=np.unique(y_test))\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "175acc3f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
